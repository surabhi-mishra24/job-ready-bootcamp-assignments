1. Write a program to find the number of vowels in each of the 5 strings stored in two
dimensional arrays, taken from the user.

#include<stdio.h>
int main()
{
char s[5][20];
int i;
for( i=0;i<5;i++){
fgets(s[i],20,stdin);
for(i=0;i<5;i++){
count=0;
for(j=0;s[i][j];j++){
if(s[i][j]=='a' ||s[i][j]=='e'||s[i][j]=='i'||s[i][j]=='o'||s[i][j]=='u'||s[i][j]=='A'||s[i][j]=='E'||s[i][j]=='I'||s[i][j]=='O'||s[i][j]=='U')
count++;
}
printf("Number of vowels in %s string is %d",s[i],count);
}
}
}
 
 
2. Write a program to sort 10 city names stored in two dimensional arrays, taken from
the user.
#include<stdio.h>
#include<string.h>
int main(){

    char str[10][20]={"mumbai","goa","kanpur","bhopal","delhi","nagpur","jabalpur","thane","bhandup","kurla"};

    for(int i=0;i<10;i++)
    {
        for(int j=i+1;j<10;j++)
        {
            int p = strcmp(str[i],str[j]);
            if(p==-1 || p==0)
                continue;
            else
            {
                char tmp[1][20];
                strcpy(tmp, str[i]);
                strcpy(str[i], str[j]);
                strcpy(str[j], tmp);
            }
        }
    }
    for(int i=0;i<10;i++)
    {
        printf("%s\n",str[i]);
    }
    return 0;
}

3. Write a program to read and display a 2D array of strings in C language.

#include<stdio.h>
int main(){
char st[10][30];
printf("Enter your strings ");
for(i=0;i<10;i++)
fgets(st[i],30,stdin);

for(i=0;i<10;i++)
{
printf("%s",st[i]);
}
}

4. Write a program to search a string in the list of strings.

#include<stdin.h>
#include<string.h>
int main()
{
char s[10][30];
int flag=0;
printf("Enter your strings ");
for(i=0;i<10;i++)
fgets(st[i],30,stdin);
printf("Enter your string");
fgets(t,30,stdin);
for(i=0;i<10;i++){
 result=strcmp(s[i],t);
 if(result==0){
  printf("Found string");
  flag++;
 }

}
if(flag==0)
printf("string not founded");
}

5. Suppose we have a list of email addresses, check whether all email addresses have
‘@’ in it. Print the odd email out.

#include<stdio.h>
 int main()
 {
  char s[10][30];
    int i.flag;
    for( i=0;i<5;i++){
fgets(s[i],20,stdin);
fpr(i=0;s[i];i++){
flag=0;
for(int j=0;s[i][j];j++){
if(s[i][j]=='@')
flag++;
}
if(flag==0)
printf("%s",s[i]);
}
 }

6. Write a program to print the strings which are palindrome in the list of strings.

void palidrome(char st[])
{
    int i,p,l;
    for(i=0;s[i];i++);
    l=i;
    for(i=0,p=l-1;i<=l/2;i++,p--)
    {
        if(st[i]!=st[p])
            break;
    }
    if(i==(l/2))
        printf("palidrome");
    else
        printf("not a  palidrome");
}
int main()
{
    char st[10][30];
    int i;
    for( i=0;i<10;i++){
fgets(s[i],20,stdin);
    for(i=0;i<10;i++)
    palidrome(st[i]);
}
7. From the list of IP addresses, check whether all ip addresses are valid.


#include<string.h>
#include<stdio.h>
int main()
{
    int i,j,num=0,start=0,end=0,count=0,n,x,t,z;
    char ip[4][15]={"132.345.24.56","234.56.78.45","0,0.0.0","234.45.67.67"};
    char temp[3]={0};
    for(i=0;i<4;i++)
    {
        count=0;
        start=0;
        num=0;
        for(j=0;ip[i][j];j++)
        {

            while(ip[i][j]!='.')
                {
                    if(ip[i][j]=='\0')
                        break;

                j++;
                }

              if(ip[i][j]=='.')
                {
                    count++;
                    end=j-1;
                }
              n=0;
            for(t=0,x=start;start<=end;t++,x++)
                {
                    if(t<=end)
                        {
                         temp[t]=ip[i][x];
         printf("%c in temp ",temp[t]);
                    }
                }

                /*if(t!=2)
                {
                    for(z=end+1;z<3;z++)
                        temp[z]='NULL';
                }
             */


                printf("\n");


            n=atoi(temp);
             printf(" in num %d ",n);
            start=j+1;

            if(n<=250&&n>=0)
                num++;

                printf("\n");

        }
        if(num==4 &&count==3)
            printf("\nvalid ip %s",ip[i]);

    }
}


8. Given a list of words followed by two words, the task is to find the minimum distance
between the given two words in the list of words.
(Example : s = {“the”,”quick”,”brown”,”fox”,”quick”}
word1 = “the”, word2 = “fox”, OUTPUT : 1 )

#include <limits.h>
#include <stdio.h>
#include <string.h>
 
// Function to return shortest distance
int shortestDistance(char s[][10], int n, char* word1,
                     char* word2)
{
    int d1 = -1, d2 = -1;
    int ans = INT_MAX;
 
    // Traverse the string
    for (int i = 0; i < n; i++) {
        if (strcmp(s[i], word1) == 0)
            d1 = i;
        if (strcmp(s[i], word2) == 0)
            d2 = i;
        if (d1 != -1 && d2 != -1)
            ans = ans < abs(d1 - d2) ? ans : abs(d1 - d2);
    }
 
    // Return the answer
    return ans;
}
 
// Driver Code
int main()
{
    char S[][10]
        = { "the", "quick", "brown", "fox", "quick" };
    int n = 5;
 
    char* word1 = "the";
    char* word2 = "fox";
 
    // Function Call
    printf("%d", shortestDistance(S, n, word1, word2));
 
    return 0;
}

9. Write a program that asks the user to enter a username. If the username entered is
one of the names in the list then the user is allowed to calculate the factorial of a
number. Otherwise, an error message is displayed


10. Create an authentication system. It should be menu driven.
