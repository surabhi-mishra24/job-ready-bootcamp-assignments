1. Define a function to input variable length string and store it in an array without
memory wastage.


#include<stdlib.h>
#include<stdio.h>
int main()
{
    char *ptr,c;
    int i=0,j=1;
    ptr=(char *)malloc(sizeof(char));
    printf("Enter your string :");
    while (c!='\n')
    {
        c=getc(stdin);
        j++;
        ptr=(char *)realloc(ptr,j*sizeof(char));
        ptr[i]=c;
        i++;
    }
    ptr[i]='\0';
    printf("Your string is %s",ptr);
    free(ptr);
}


=================

2. Write a program to ask the user to input a number of data values he would like to
enter then create an array dynamically to accommodate the data values. Now take
the input from the user and display the average of data values.


#include<stdlib.h>
#include<stdio.h>
int main()
{
    int *ptr,n,sum,i=0;
    printf("Enter size of array ");
    scanf("%d",&n);
    ptr=(int *)calloc(n,sizeof(int));
    if(ptr==NULL)
    {
        printf("memory allocation failed ");
        return 0;
    }
    printf("Enter your values ");
    while(i<n)
    {
        scanf("%d",ptr+i);
    i++;
    }
    i=0;
       while(i<=n)
    {
        sum=sum+*(ptr+i);
    i++;
    }
    printf("Average is %d",sum/n);
    free(ptr);
}


=============
3. Write a program to calculate the sum of n numbers entered by the user using malloc
and free.


#include<stdlib.h>
#include<stdio.h>
int main()
{
    int *ptr,n,sum,i=0;
    printf("Enter size of array ");
    scanf("%d",&n);
    ptr=(int *)malloc(n*sizeof(int));
    if(ptr== 'NULL')
    {
        printf("memory allocation failed ");
        return 0;
    }
    printf("Enter your values ");
    while(i<n)
    {
        scanf("%d",ptr+i);
    i++;
    }
    i=0;
       while(i<=n)
    {
        sum=sum+*(ptr+i);
    i++;
    }
    printf("sum is %d",sum);
    free(ptr);
}


====================

4. Write a program to input and print text using dynamic memory allocation.

#include<stdlib.h>
#include<stdio.h>
int main()
{
    char *ptr,c;
    int i=0,j=1;
    ptr=(char *)malloc(sizeof(char));
    while(c!='`')
    {
        c=getc(stdin);
           j++;
        ptr=(char *)realloc(ptr,j*sizeof(char));
        ptr[i]=c;
        i++;
    }
    for(i=0;ptr[i]!='`';i++)
    {
        printf("%c",ptr[i]);
    }
    free(ptr);
}


======================

5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.


#include<stdlib.h>
#include<stdio.h>
int main()
{
    int *p,n,sum,i;
    p=(int *)malloc(sizeof(int));
    printf("Enter the size of array ");
    scanf("%d",&n);
    p=(int *)realloc(p,n*sizeof(int));
    if(p==NULL)
    {
        printf("Memory allocation failed ");
        return 0;
    }
    printf("Enter your values ");
    for(i=0;i<n;i++)
        scanf("%d",p+i);
       for(i=0;i<n;i++)
       {
        printf("%d  ",*p+i);
       sum+=(*p+i);
       }
       printf("Sum is %d",sum);
       free(p);
}
5.
=======================

6. Write a program in C to find the largest element using Dynamic Memory Allocation.


#include<stdlib.h>
#include<stdio.h>
int main()
{
    int *p,n,l,i;
    p=(int *)malloc(sizeof(int));
    printf("Enter the size of array ");
    scanf("%d",&n);
    p=(int *)realloc(p,n*sizeof(int));
    if(p==NULL)
    {
        printf("Memory allocation failed ");
        return 0;
    }
    printf("Enter your values ");
    for(i=0;i<n;i++)
        scanf("%d",p+i);
l=p[0];
for(i=1;i<n;i++)
 {
     if(p[i]>l)
        l=p[i];
 }
 printf("largest number is %d",l);
}
6.

=======================
7. Write a program to demonstrate memory leak in C.

#include<stdlib.h>
#include<stdio.h>
int main ()
{
    int *p,n;
    p=(int *)malloc(sizeof(int));
    printf("Enter any value ");
    scanf("%d",p);
    printf("memory is not made free so its memory leak");
}




============================
8. Write a program to demonstrate dangling pointers in C.

#include<stdlib.h>
#include<stdio.h>
int main()
{
    int *p;
    p=(int *)malloc(sizeof(int));
    printf("Enter any value");
    scanf("%d",p);
    free(p);
    printf("%d is dangling value ",p);
}
=========================
9. Write a program to allocate memory dynamically of the size in bytes entered by the
user. Also handle the case when memory allocation is failed.

#include<stdlib.h>
#include<stdio.h>
int main()
{
    int *p,n;
    printf("Enter value in bytes ");
    scanf("%d",&n);
    p=(int *)malloc(n);
    if(p==NULL)
    {
        printf("Memory allocation failed");
        return 0;
    }
    free(p);
}

===========================

10. Find out the maximum and minimum from an array using dynamic memory allocation
in C.
#include<stdio.h>
#include<stdlib.h>
int main()
{
    int *p,n,min,max,i;
    printf("Enter size of array ");
    scanf("%d",&n);
    p=(int *)calloc(n,sizeof(int));
    for(i=0;i<n;i++)
        scanf("%d",p+i);
        min=p[0];
        max=p[0];
    for(i=1;i<n;i++)
    {
        if(p[i]>max)
            max=p[i];
        if(p[i]<min)
            min=p[i];
    }
    printf("Maximun is %d and minimum is %d",max,min);
    free(p);
}
